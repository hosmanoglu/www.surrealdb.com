<Crumb>
	<Crumb::Item @link="docs">Documentation</Crumb::Item>
	<Crumb::Item @link="docs.surrealql">SurrealQL</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements">Statements</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements.define"><code>DEFINE</code> statement</Crumb::Item>
	<Crumb::Item @link="docs.surrealql.statements.define.token"><code>TOKEN</code></Crumb::Item>
</Crumb>

<Layout::Text text-l text-f>
	<h2><code>DEFINE TOKEN</code> statement</h2>
	<p>
		SurrealDB can work with third-party authentication providers such as OpenID Connect providers, OAuth providers and other trusted parties providing JWT (JSON Web Tokens, also refered to in this page as “tokens”). Let's say that your provider issues your client (e.g. a user or a service) a JWT once it has authenticated. By using the <code>DEFINE TOKEN</code> statement, you can set the public key or shared secret that will be used to verify the authenticity of the token.
	</p>
	<p>This verification is performed automatically by SurrealDB when provided with a JWT through any of its interfaces (i.e. the <LinkTo @route="docs.integration.http"> HTTP REST API </LinkTo> through the “Authorization” header or <LinkTo @route="docs.integration.sdks"> any of the SDKs </LinkTo> through the “Authenticate” methods) before trusting the claims contained in the token and allowing SurrealQL queries to access the values of those claims.</p>


	<Layout::Text text-l text-f>
		<h3>Statement syntax</h3>
		<Code @name="docs/surrealql/statements/define/token/syntax.typescript" text="SQL Syntax" />
	</Layout::Text>
<Layout::Gap mini />

	<p>With HMAC algorithms (<code>HS256</code>,<code>HS384</code>,<code>HS512</code>) the value of the defined token will be the secret used both to sign and verify the signature of the token. Anyone with access to this secret will be able to issue tokens with arbitrary claims which will be trusted by SurrealDB.</p>

	<p>The following example shows the definition of a token using an HMAC algorithm.</p>

	<Code @name="docs/surrealql/statements/define/token/hmac-algorithm.surql"/>

	<p>
		With public-key cryptography algorithms
		(<code>EDDSA</code>,
		<code>ES256</code>,
		<code>ES384</code>,
		<code>ES512</code>,
		<code>PS256</code>,
		<code>PS384</code>,
		<code>PS512</code>,
		<code>RS256</code>,
		<code>RS384</code>,
		<code>RS512</code>)
		the value of the defined token will be the public key used to verify the signature of the token. This value is not secret and should be provided by the issuer of the tokens. Tokens will be signed using the private key, known only to the issuer. The public key value should be provided to SurrealDB including its header and footer. Any whitespace will be trimmed.
	</p>
	<p>The following example shows the definition of a token using a public-key cryptography algorithm.</p>
	<Code @name="docs/surrealql/statements/define/token/public-key-algorithm.surql"/>
	<p>If not specified, the default algorithm used is <code>HS512</code>.</p>
	<h4>Requirements</h4>
	<ul>
		<li>To <code>DEFINE TOKEN ... ON NAMESPACE ...</code> you must have root or namespace level access.</li>
		<li>To <code>DEFINE TOKEN ... ON DATABASE ...</code> you must have root, namespace, or database level access.</li>
		<li>To <code>DEFINE TOKEN ... ON SCOPE ...</code> you must have root, namespace, or database level access.</li>
		<li><LinkTo @route="docs.surrealql.statements.use">You must select your namespace and/or database</LinkTo> before you can use the <code>DEFINE TOKEN</code> statement for database or namespace tokens.</li>
	</ul>
</Layout::Text>

<Layout::Gap mini />

<Layout::Text text-l text-f>

	<h3>Using Tokens</h3>
	<p>
		The <code>DEFINE TOKEN</code> statement lets you specify the amount of permission granting authority you want to give to a token issuer. You are able to specify if the provider can grant namespace, database, or scope level access to token holders. For this to work, the JWT issued to be used with SurrealDB must contain claims to specify which namespace, database or scope the token bearer is authorized to act on.
	</p>
	<p>
		The following claims should be added to the JWT payload by the issuer of the token:
	</p>
	<p>
		<ul>
			<li> <code>tk</code>: The name that you chose when defining the token.</li>
			<li> <code>ns</code>:  The namespace that the token is issued for.</li>
			<li> <code>db</code>: The database that the token is issued for.</li>
			<li> <code>sc</code>: The scope that the token is issued for.</li>
		</ul>
	</p>
	<p> The names of these claims can be in all lowercase (i.e. <code>tk</code>) or all uppercase (i.e. <code>TK</code>), and can be optionally prefaced with the <code>https://surrealdb.com</code>  namespace (e.g. <code>https://surrealdb.com/tk</code>) in order to separate claims directed to SurrealDB from claims directed to other services. When using a namespace, the claim name can also be used without abbreviation, such as in <code>https://surrealdb.com/token</code>, <code>https://surrealdb.com/scope</code>...</p>

	<p> The following optional claims are also processed by SurrealDB:</p>
	<ul>
		<li> <code>id</code>: The identifier of the resource (e.g. user) associated with the token.</li>
		<li> <code>exp</code>: The token expiration in Unix time.</li>
	</ul>

	<p>The expected claims depend on the level at which the token was defined:</p>
		<ul>
			<li> For tokens defined <code>ON NAMESPACE</code>: <code>tk</code>, <code>ns</code>.</li>
			<li> For tokens defined  <code>ON DATABASE</code>: <code>tk</code>, <code>ns</code>,<code>db</code>.</li>
			<li> For tokens defined  <code>ON SCOPE</code>: <code>tk</code>, <code>ns</code>,<code>db</code>, <code>sc</code>, optionally <code>id</code>.</li>
		</ul>


<p> When calling any of the SurrealDB interfaces using a JWT, SurrealQL queries will gain access to the claims in the token through the <code>$token</code> variable. For example, if the token contains custom claims such as “name” or “email”, the values of those claims will be accessible through <code>$token.name</code> and <code>$token.email</code>.</p>

<p> Additionally, when the <code>id</code> claim is present in the token, the fields of the record matching the identifier specified will be accessible through the <code>$auth</code> variable. For example, if the value of the <code>id</code>  claim is <code>user:73q1bl039y6k8z80v55d</code>, and user records have fields such as “name” or “email”, then <code>$auth.name</code>and <code>$auth.email</code> can be used to access those values for the <code>user:73q1bl039y6k8z80v55d</code> record specifically, without them being present in the JWT.
</p>
<p>
	The signature of the token is verified with method defined when creating the token. If the signature of the token is invalid, calls to SurrealDB interfaces using that token will fail.
</p>

	<h4>Namespace</h4>
	<p>Namespace tokens can be used to select, create, update, and delete on all tables in all databases, as well as to define and remove databases and tables from the namespace.</p>
	<Code @name="docs/surrealql/statements/define/token/authorize-namespace-token.surql" />
	<p>The namespace token payload should at least include the following claims when used to authenticate with SurrealDB.</p>
	<Code @name="docs/surrealql/statements/define/token/authorize-namespace-token.json" text="JWT Payload" />

	<h4>Database</h4>
	<p>Database tokens can be used to select, create, update, and delete on all tables in a specific database, as well as to define and remove tables from the database.</p>
	<Code @name="docs/surrealql/statements/define/token/token.surql" />
	<p>The database token payload should at least include the following claims when used to authenticate with SurrealDB.</p>
	<Code @name="docs/surrealql/statements/define/token/authorize-database-token.json" text="JWT Payload" />

	<h4>Scope</h4>
	<p>Since the origin of the claims in the JWT is verified, those claims can be used within SurrealQL in the context of a scope in order to provide table and field authorization through an external authenticator using OpenID Connect, OAuth or simply acting as a trusted issuer of a JWT.
	</p>

	<p>
		This can be done by leveraging table permissions to allow or disallow access depending on the values of the claims in the verified token. For example, these claims can be compared with the records in a table to only return those matching certain criteria.
	</p>

<p>
	The scope for which the token was issued will be accessible to SurrealQL through the <code>$scope</code> variable, corresponding to the contents of the <code>sc</code> claim. External authorization providers may provide additional scopes that will not be accessible in this way, and instead should be accessed as any other claim through the <code>$token</code> variable.
</p>
<p>
Bear in mind that <strong> table and field permissions only apply to scope level tokens </strong> Access provided by namespace and database tokens is above table-level permissions. When application users will be the ones directly authenticating with JWT, scope tokens are most likely the right choice.</p>
<p>
	The following example shows how scope tokens can be used to grant authorization by verifying that the “email” claim in the token matches the email used as the index of a user table:
</p>
	<Code @name="docs/surrealql/statements/define/token/scope-example.surql" />

<p>
	You may also use permissions clauses to perform additional verification on other JWT claims (e.g. verifying that the  <code>iss</code> claim matches a specific principal using <code>$token.iss</code>) that may be required or recommended by a the provider of the token.
</p>
	<p>The scope token payload should at least include the following claims when used to authenticate with SurrealDB.</p>
	<Code @name="docs/surrealql/statements/define/token/authorize-scope-token.json" text="JWT Payload" />

</Layout::Text>

<Layout::Gap large />
